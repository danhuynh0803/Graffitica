#include <iostream>
#include <fstream>
#include "canvas.h"
#include "vec3.h"
#include "noise.h"
#include "Matrix.h"
#include "Quaternion.h"

// Color lib
color WHITE(1.0f, 1.0f, 1.0f); 
color BLACK(0.0f, 0.0f, 0.0f); 
color RED(1.0f, 0.0f, 0.0f); 
color GREEN(0.0f, 1.0f, 0.0f); 
color BLUE(0.0f, 0.0f, 1.0f); 
color PURPLE(1.0f, 0.0f, 1.0f); 
color CYAN(0.0f, 1.0f, 1.0f); 
color YELLOW(1.0f, 1.0f, 0.0f); 

int main()
{
    // Test points
    vec3 p0(-1.5f, -1.5f, 0.0f);    // bottom left
    vec3 p1(1.0f, 1.0f, 0.0f);      // top right 
    vec3 p2(-1.0f, 1.0f, 0.0f);     // top left 
    vec3 p3(1.0f, 0.0f, 0.0f);      // center left
    vec3 p4(1.0f, -1.0f, 0.0f);     // bottom right 
    vec3 p5(0.0f, 1.0f, 0.0f);      // top center     
    vec3 p6(1.0f, 0.0f, 0.0f);      // center right

	MyMathFuncs::Matrix m(3,3);
	m.entry[0][0] = MyMathFuncs::Quaternion(1, 10, 0, 2);
	m.entry[1][0] = MyMathFuncs::Quaternion(3, 0, 44, 0);
	m.entry[2][0] = MyMathFuncs::Quaternion(3, 21, 0, 6);
	m.entry[0][1] = MyMathFuncs::Quaternion(2, 0, 5, 0);
	m.entry[1][1] = MyMathFuncs::Quaternion(5, 3, 3, 5);
	m.entry[2][1] = MyMathFuncs::Quaternion(4, 0, 7, 0);
	m.entry[0][2] = MyMathFuncs::Quaternion(2, 0, 2, 1);
	m.entry[1][2] = MyMathFuncs::Quaternion(4, 100, 0, 1);
	m.entry[2][2] = MyMathFuncs::Quaternion(4, 0, 2, 9);
	std::cout<<m;

    Canvas c(2048, 2048);
    c.reset_canvas(WHITE);

    c.draw_triangle(p5, p0, p6, BLUE, true);
    c.print_canvas("tri_outofbounds.ppm");


	c.draw_triangle(p0, p5, p6, RED, false);
	p0 = MyMathFuncs::Matrix::rotateNdegreeAboutZ(125, p0);
	p5 = MyMathFuncs::Matrix::rotateNdegreeAboutZ(125, p5);
	p6 = MyMathFuncs::Matrix::rotateNdegreeAboutZ(125, p6);
	c.draw_triangle(p0, p5, p6, CYAN, true);
    c.print_canvas("tri8GG.ppm");
	
    return 0;
}
